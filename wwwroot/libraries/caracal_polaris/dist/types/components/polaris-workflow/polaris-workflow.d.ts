import { EventEmitter } from "../../stencil-public-runtime";
import { Control } from "../../model/control.model";
import { Page } from "../../model/page.model";
import { Context } from "../../model/context.model";
import { HttpService } from "../../services/http.service";
import { ModelService } from "../../services/model.service";
import { ConfigService } from "../../services/config.service";
import { WorkflowService } from "../../services/workflow.service";
import { ValidatorService } from "../../services/validator.service";
import { Message } from "../../model/message.model";
import { Activity } from "../../activities/activity";
import { Validator } from "../../validators/validator";
export declare class PolarisWorkflow implements Control {
  private _components;
  private _loader;
  parent: Context;
  tag: string;
  page: Page;
  ctx: Context;
  value?: any;
  url: string;
  process: string | object;
  activity: string;
  sessionId: string;
  http: HttpService;
  config: ConfigService;
  model: ModelService;
  wf: WorkflowService;
  validator: ValidatorService;
  el: HTMLElement;
  processChangeHandler(): void;
  wfMessage: EventEmitter;
  get controls(): any;
  set controls(val: any);
  setServices(ctx: Context): Promise<void>;
  load(process: any, next?: string, sessionId?: string): Promise<void>;
  addActivity(activity: Activity): Promise<void>;
  addValidator(validator: Validator): Promise<void>;
  sendMessage(message: Message): void;
  componentWillLoad(): Promise<void>;
  onInput(newEl: HTMLElement & Control): void;
  _render(): void;
}
